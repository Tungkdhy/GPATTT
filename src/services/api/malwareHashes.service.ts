import axiosInstance from './axiosInstance';

// Interface cho malware hash với malware type
export interface MalwareHashWithType {
  id?: string;
  hash_value: string;
  malware_type_id: string | null;
  malware_type_name?: string; // Optional for display purposes
}

// Interface cho response từ API
export interface MalwareHashResponse {
  message: string;
  data: MalwareHashWithType[];
}

// Interface cho malware hash item (có thể có thêm id nếu cần)
export interface MalwareHashItem {
  id?: string;
  hash_value: string;
  malware_type_id: string | null;
  malware_type_name?: string;
  created_at?: string;
  updated_at?: string;
}

// Interface cho create/update DTO
export interface CreateMalwareHashDto {
  hash_value: string;
  malware_type_id?: string | null;
}

export interface UpdateMalwareHashDto {
  hash_value?: string;
  malware_type_id?: string | null;
}

class MalwareHashesService {
  // Lấy danh sách malware hashes với malware type
  async getAllWithMalwareType(): Promise<MalwareHashWithType[]> {
    try {
      const response = await axiosInstance.get('/manager-hashs/all/with-malware-type');
      return response.data.data;
    } catch (error) {
      console.error('Error fetching malware hashes with malware type:', error);
      throw error;
    }
  }

  // Lấy danh sách malware hashes (có thể có pagination)
  async getAll(page: number = 1, size: number = 10000, params = {}): Promise<any> {
    try {
      const response = await axiosInstance.get('/manager-hashs/all/with-malware-type', {
        params: {
          pageSize: size,
          pageIndex: page,
          ...params
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error fetching malware hashes:', error);
      throw error;
    }
  }

  // Lấy thông tin malware hash theo ID
  async getById(id: string): Promise<MalwareHashItem> {
    try {
      const response = await axiosInstance.get(`/manager-hashs/${id}`);
      return response.data.data;
    } catch (error) {
      console.error('Error fetching malware hash:', error);
      throw error;
    }
  }

  // Tạo malware hash mới
  async create(data: CreateMalwareHashDto): Promise<MalwareHashItem> {
    try {
      const response = await axiosInstance.post('/manager-hashs', {
        hash_value: data.hash_value,
        malware_type_id: data.malware_type_id || null
      });
      return response.data.data;
    } catch (error) {
      console.error('Error creating malware hash:', error);
      throw error;
    }
  }

  // Cập nhật malware hash
  async update(id: string, data: UpdateMalwareHashDto): Promise<MalwareHashItem> {
    try {
      const response = await axiosInstance.put(`/manager-hashs/${id}`, {
        hash_value: data.hash_value,
        malware_type_id: data.malware_type_id || null
      });
      return response.data.data;
    } catch (error) {
      console.error('Error updating malware hash:', error);
      throw error;
    }
  }

  // Xóa malware hash
  async delete(id: string): Promise<void> {
    try {
      await axiosInstance.delete(`/manager-hashs/${id}`);
    } catch (error) {
      console.error('Error deleting malware hash:', error);
      throw error;
    }
  }

  // Xóa nhiều malware hashes
  async deleteMultiple(ids: string[]): Promise<void> {
    try {
      await axiosInstance.delete('/manager-hashs/batch', {
        data: { ids }
      });
    } catch (error) {
      console.error('Error deleting multiple malware hashes:', error);
      throw error;
    }
  }

  // Tìm kiếm malware hashes
  async search(query: string, page: number = 1, size: number = 10000): Promise<any> {
    try {
      const response = await axiosInstance.get('/manager-hashs/search', {
        params: {
          q: query,
          pageSize: size,
          pageIndex: page
        }
      });
      return response.data;
    } catch (error) {
      console.error('Error searching malware hashes:', error);
      throw error;
    }
  }
}

export default new MalwareHashesService();
