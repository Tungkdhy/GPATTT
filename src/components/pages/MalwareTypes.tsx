import { useState } from 'react';
import { Badge } from '../ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';
import { Label } from '../ui/label';
import { Input } from '../ui/input';
import { Textarea } from '../ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { AdvancedFilter, FilterOption } from '../common/AdvancedFilter';
import { Plus, Edit, Trash2, Eye } from 'lucide-react';

const mockMalwareTypes = [
  { 
    id: 1, 
    name: 'Trojan', 
    category: 'Stealth', 
    severity: 'high', 
    detectionMethod: 'Signature', 
    prevalence: 'high',
    description: 'Phần mềm độc hại giả mạo phần mềm hợp pháp để xâm nhập hệ thống'
  },
  { 
    id: 2, 
    name: 'Ransomware', 
    category: 'Encryption', 
    severity: 'critical', 
    detectionMethod: 'Behavioral', 
    prevalence: 'medium',
    description: 'Mã độc mã hóa dữ liệu và yêu cầu tiền chuộc'
  },
  { 
    id: 3, 
    name: 'Spyware', 
    category: 'Surveillance', 
    severity: 'medium', 
    detectionMethod: 'Heuristic', 
    prevalence: 'high',
    description: 'Thu thập thông tin người dùng mà không được phép'
  },
  { 
    id: 4, 
    name: 'Rootkit', 
    category: 'Stealth', 
    severity: 'high', 
    detectionMethod: 'Advanced', 
    prevalence: 'low',
    description: 'Ẩn sự hiện diện của phần mềm độc hại khác'
  },
  { 
    id: 5, 
    name: 'Botnet', 
    category: 'Network', 
    severity: 'high', 
    detectionMethod: 'Network', 
    prevalence: 'medium',
    description: 'Mạng lưới máy tính bị kiểm soát từ xa'
  },
  { 
    id: 6, 
    name: 'Adware', 
    category: 'Advertising', 
    severity: 'low', 
    detectionMethod: 'Signature', 
    prevalence: 'high',
    description: 'Hiển thị quảng cáo không mong muốn'
  }
];

const getSeverityColor = (severity: string) => {
  switch (severity) {
    case 'critical': return 'bg-red-500/10 text-red-500 border-red-500/20';
    case 'high': return 'bg-orange-500/10 text-orange-500 border-orange-500/20';
    case 'medium': return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
    case 'low': return 'bg-blue-500/10 text-blue-500 border-blue-500/20';
    default: return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
  }
};

const getSeverityText = (severity: string) => {
  switch (severity) {
    case 'critical': return 'Nghiêm trọng';
    case 'high': return 'Cao';
    case 'medium': return 'Trung bình';
    case 'low': return 'Thấp';
    default: return 'Không xác định';
  }
};

const getPrevalenceColor = (prevalence: string) => {
  switch (prevalence) {
    case 'high': return 'bg-red-500/10 text-red-500 border-red-500/20';
    case 'medium': return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
    case 'low': return 'bg-green-500/10 text-green-500 border-green-500/20';
    default: return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
  }
};

const getPrevalenceText = (prevalence: string) => {
  switch (prevalence) {
    case 'high': return 'Cao';
    case 'medium': return 'Trung bình';
    case 'low': return 'Thấp';
    default: return 'Không xác định';
  }
};

const columns = [
  {
    key: 'name',
    title: 'Tên loại mã độc',
    filterable: true,
    filterType: 'text' as const
  },
  {
    key: 'category',
    title: 'Danh mục',
    filterable: true,
    filterType: 'select' as const,
    filterOptions: [
      { value: 'Stealth', label: 'Stealth' },
      { value: 'Encryption', label: 'Encryption' },
      { value: 'Surveillance', label: 'Surveillance' },
      { value: 'Network', label: 'Network' },
      { value: 'Advertising', label: 'Advertising' }
    ]
  },
  {
    key: 'severity',
    title: 'Mức độ nguy hiểm',
    render: (value: string) => (
      <Badge variant="outline" className={getSeverityColor(value)}>
        {getSeverityText(value)}
      </Badge>
    ),
    filterable: true,
    filterType: 'select' as const,
    filterOptions: [
      { value: 'critical', label: 'Nghiêm trọng' },
      { value: 'high', label: 'Cao' },
      { value: 'medium', label: 'Trung bình' },
      { value: 'low', label: 'Thấp' }
    ]
  },
  {
    key: 'detectionMethod',
    title: 'Phương pháp phát hiện',
    filterable: true,
    filterType: 'select' as const,
    filterOptions: [
      { value: 'Signature', label: 'Signature' },
      { value: 'Behavioral', label: 'Behavioral' },
      { value: 'Heuristic', label: 'Heuristic' },
      { value: 'Network', label: 'Network' },
      { value: 'Advanced', label: 'Advanced' }
    ]
  },
  {
    key: 'prevalence',
    title: 'Tần suất xuất hiện',
    render: (value: string) => (
      <Badge variant="outline" className={getPrevalenceColor(value)}>
        {getPrevalenceText(value)}
      </Badge>
    ),
    filterable: true,
    filterType: 'select' as const,
    filterOptions: [
      { value: 'high', label: 'Cao' },
      { value: 'medium', label: 'Trung bình' },
      { value: 'low', label: 'Thấp' }
    ]
  },
  {
    key: 'description',
    title: 'Mô tả'
  }
];

export function MalwareTypes() {
  const [malwareTypes, setMalwareTypes] = useState(mockMalwareTypes);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState<Record<string, any>>({});
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  const filterOptions: FilterOption[] = [
    {
      key: 'category',
      label: 'Danh mục',
      type: 'select',
      options: [
        { value: 'Stealth', label: 'Stealth' },
        { value: 'Encryption', label: 'Encryption' },
        { value: 'Surveillance', label: 'Surveillance' },
        { value: 'Network', label: 'Network' },
        { value: 'Advertising', label: 'Advertising' }
      ]
    },
    {
      key: 'severity',
      label: 'Mức độ nguy hiểm',
      type: 'select',
      options: [
        { value: 'critical', label: 'Nghiêm trọng' },
        { value: 'high', label: 'Cao' },
        { value: 'medium', label: 'Trung bình' },
        { value: 'low', label: 'Thấp' }
      ]
    },
    {
      key: 'detectionMethod',
      label: 'Phương pháp phát hiện',
      type: 'multiSelect',
      options: [
        { value: 'Signature', label: 'Signature' },
        { value: 'Behavioral', label: 'Behavioral' },
        { value: 'Heuristic', label: 'Heuristic' },
        { value: 'Network', label: 'Network' },
        { value: 'Advanced', label: 'Advanced' }
      ]
    },
    {
      key: 'prevalence',
      label: 'Tần suất xuất hiện',
      type: 'select',
      options: [
        { value: 'high', label: 'Cao' },
        { value: 'medium', label: 'Trung bình' },
        { value: 'low', label: 'Thấp' }
      ]
    }
  ];

  const filteredMalwareTypes = malwareTypes.filter(malware => {
    const matchesSearch = malware.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      malware.description.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesCategory = !filters.category || malware.category === filters.category;
    const matchesSeverity = !filters.severity || malware.severity === filters.severity;
    const matchesDetectionMethod = !filters.detectionMethod || 
      (Array.isArray(filters.detectionMethod) ? 
        filters.detectionMethod.includes(malware.detectionMethod) : 
        malware.detectionMethod === filters.detectionMethod);
    const matchesPrevalence = !filters.prevalence || malware.prevalence === filters.prevalence;
    
    return matchesSearch && matchesCategory && matchesSeverity && matchesDetectionMethod && matchesPrevalence;
  });

  return (
    <div className="space-y-6 fade-in-up">
      <div className="slide-in-left">
        <h1>Quản lý loại mã độc</h1>
        <p className="text-muted-foreground">
          Quản lý và phân loại các loại mã độc trong hệ thống
        </p>
      </div>

      <Card className="card-hover">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Danh sách loại mã độc</CardTitle>
              <CardDescription>
                Tổng cộng {malwareTypes.length} loại mã độc trong hệ thống
              </CardDescription>
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button className="btn-animate scale-hover">
                  <Plus className="mr-2 h-4 w-4" />
                  Thêm loại mã độc
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Thêm loại mã độc mới</DialogTitle>
                  <DialogDescription>
                    Thêm loại mã độc mới vào hệ thống
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  <div className="space-y-2">
                    <Label htmlFor="malware-name">Tên loại mã độc</Label>
                    <Input id="malware-name" placeholder="Nhập tên loại mã độc" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="malware-category">Danh mục</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Chọn danh mục" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="stealth">Stealth</SelectItem>
                        <SelectItem value="encryption">Encryption</SelectItem>
                        <SelectItem value="surveillance">Surveillance</SelectItem>
                        <SelectItem value="network">Network</SelectItem>
                        <SelectItem value="advertising">Advertising</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="malware-severity">Mức độ nguy hiểm</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Chọn mức độ" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="critical">Nghiêm trọng</SelectItem>
                        <SelectItem value="high">Cao</SelectItem>
                        <SelectItem value="medium">Trung bình</SelectItem>
                        <SelectItem value="low">Thấp</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="detection-method">Phương pháp phát hiện</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Chọn phương pháp" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="signature">Signature</SelectItem>
                        <SelectItem value="behavioral">Behavioral</SelectItem>
                        <SelectItem value="heuristic">Heuristic</SelectItem>
                        <SelectItem value="network">Network</SelectItem>
                        <SelectItem value="advanced">Advanced</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="malware-prevalence">Tần suất xuất hiện</Label>
                    <Select>
                      <SelectTrigger>
                        <SelectValue placeholder="Chọn tần suất" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="high">Cao</SelectItem>
                        <SelectItem value="medium">Trung bình</SelectItem>
                        <SelectItem value="low">Thấp</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="malware-description">Mô tả</Label>
                    <Textarea id="malware-description" rows={3} placeholder="Nhập mô tả chi tiết" />
                  </div>
                </div>
                <DialogFooter>
                  <Button type="submit" className="w-full">Thêm loại mã độc</Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <AdvancedFilter
              searchPlaceholder="Tìm kiếm loại mã độc..."
              searchValue={searchTerm}
              onSearchChange={setSearchTerm}
              filterOptions={filterOptions}
              filters={filters}
              onFiltersChange={setFilters}
              onReset={() => setSearchTerm('')}
            />
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Tên loại mã độc</TableHead>
                <TableHead>Danh mục</TableHead>
                <TableHead>Mức độ nguy hiểm</TableHead>
                <TableHead>Phương pháp phát hiện</TableHead>
                <TableHead>Tần suất xuất hiện</TableHead>
                <TableHead>Mô tả</TableHead>
                <TableHead className="text-right">Thao tác</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredMalwareTypes.map((malware, index) => (
                <TableRow key={malware.id} className="stagger-item" style={{animationDelay: `${index * 0.05}s`}}>
                  <TableCell className="font-medium">{malware.name}</TableCell>
                  <TableCell>{malware.category}</TableCell>
                  <TableCell>
                    <Badge variant="outline" className={getSeverityColor(malware.severity)}>
                      {getSeverityText(malware.severity)}
                    </Badge>
                  </TableCell>
                  <TableCell>{malware.detectionMethod}</TableCell>
                  <TableCell>
                    <Badge variant="outline" className={getPrevalenceColor(malware.prevalence)}>
                      {getPrevalenceText(malware.prevalence)}
                    </Badge>
                  </TableCell>
                  <TableCell className="max-w-xs truncate">{malware.description}</TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-2">
                      <Button variant="ghost" size="sm" className="scale-hover">
                        <Eye className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="sm" className="scale-hover">
                        <Edit className="h-4 w-4" />
                      </Button>
                      <Button variant="ghost" size="sm" className="scale-hover">
                        <Trash2 className="h-4 w-4" />
                      </Button>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </CardContent>
      </Card>
    </div>
  );
}