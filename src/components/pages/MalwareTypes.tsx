import { useState, useEffect } from 'react';
import { Badge } from '../ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '../ui/alert-dialog';
import { Label } from '../ui/label';
import { Input } from '../ui/input';
import { Textarea } from '../ui/textarea';
import { AdvancedFilter, FilterOption } from '../common/AdvancedFilter';
import { TablePagination } from '../common/TablePagination';
import { Plus, Edit, Trash2, Eye, Loader2, XCircle, RefreshCw } from 'lucide-react';
import malwareTypesService, { MalwareType, CreateMalwareTypeDto, UpdateMalwareTypeDto } from '../../services/api/malwareTypes.service';
import { useServerPagination } from '../../hooks/useServerPagination';
import { toast } from 'sonner';


// Get status badge color based on creation date
const getStatusColor = (createdAt?: string) => {
  if (!createdAt) return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
  
  const createdDate = new Date(createdAt);
  const now = new Date();
  const diffDays = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
  
  if (diffDays <= 7) return 'bg-green-500/10 text-green-500 border-green-500/20';
  if (diffDays <= 30) return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
  return 'bg-blue-500/10 text-blue-500 border-blue-500/20';
};

const getStatusText = (createdAt?: string) => {
  if (!createdAt) return 'Không xác định';
  
  const createdDate = new Date(createdAt);
  const now = new Date();
  const diffDays = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60 * 24));
  
  if (diffDays <= 7) return 'Mới';
  if (diffDays <= 30) return 'Gần đây';
  return 'Cũ';
};


export function MalwareTypes() {
  const [malwareTypes, setMalwareTypes] = useState<MalwareType[]>([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState<Record<string, any>>({});
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);
  const [isCreating, setIsCreating] = useState(false);
  const [isUpdating, setIsUpdating] = useState(false);
  const [isDeleting, setIsDeleting] = useState(false);
  const [selectedMalwareType, setSelectedMalwareType] = useState<MalwareType | null>(null);
  const [errorMessage, setErrorMessage] = useState<string>('');
  const [refreshTrigger, setRefreshTrigger] = useState(0);
  const [isRefreshing, setIsRefreshing] = useState(false);
  
  // Form state for creating new malware type
  const [formData, setFormData] = useState<CreateMalwareTypeDto>({
    malware_type_name: '',
    description: '',
    id_peripheral_devices: null
  });

  // Form state for editing malware type
  const [editFormData, setEditFormData] = useState<UpdateMalwareTypeDto>({
    malware_type_name: '',
    description: '',
    id_peripheral_devices: null
  });

  // Refresh data function
  const refreshData = () => {
    setIsRefreshing(true);
    setRefreshTrigger(prev => prev + 1);
  };

  // Use server pagination hook
  const {
    data: paginatedData,
    currentPage,
    totalPages,
    startIndex,
    endIndex,
    total,
    loading: paginationLoading,
    error: paginationError,
    setCurrentPage
  } = useServerPagination(
    async (page: number, limit: number) => {
      try {
        const result = await malwareTypesService.getAll(page, limit);
        return { rows: result.rows, count: result.count };
      } catch (error: any) {
        const errorMsg = error?.response?.data?.message || error?.message || 'Có lỗi xảy ra khi tải dữ liệu';
        toast.error(errorMsg);
        throw error;
      }
    },
    [refreshTrigger], // Add refreshTrigger as dependency
    { pageSize: 20 }
  );

  // Update local state when paginated data changes
  useEffect(() => {
    setMalwareTypes(paginatedData as MalwareType[]);
    setIsRefreshing(false); // Reset refreshing state when data is loaded
  }, [paginatedData]);

  const filterOptions: FilterOption[] = [
    {
      key: 'peripheral_device_name',
      label: 'Thiết bị ngoại vi',
      type: 'select'
    },
    {
      key: 'created_by_name',
      label: 'Người tạo',
      type: 'select'
    },
    {
      key: 'status',
      label: 'Trạng thái',
      type: 'select',
      options: [
        { value: 'new', label: 'Mới' },
        { value: 'recent', label: 'Gần đây' },
        { value: 'old', label: 'Cũ' }
      ]
    }
  ];

  // Handle create malware type
  const handleCreate = async () => {
    if (!formData.malware_type_name.trim()) {
      toast.error('Vui lòng nhập tên loại mã độc');
      return;
    }
    
    setIsCreating(true);
    setErrorMessage('');
    try {
      await malwareTypesService.create(formData);
      toast.success('Tạo loại mã độc thành công!');
      setFormData({
        malware_type_name: '',
        description: '',
        id_peripheral_devices: null
      });
      setIsDialogOpen(false);
      // Refresh data after successful creation
      refreshData();
    } catch (error: any) {
      const errorMsg = error?.response?.data?.message || error?.message || 'Có lỗi xảy ra khi tạo loại mã độc';
      setErrorMessage(errorMsg);
      toast.error(errorMsg);
      console.error('Error creating malware type:', error);
    } finally {
      setIsCreating(false);
    }
  };

  // Handle edit malware type
  const handleEdit = (malwareType: MalwareType) => {
    setSelectedMalwareType(malwareType);
    setEditFormData({
      malware_type_name: malwareType.malware_type_name,
      description: malwareType.description || '',
      id_peripheral_devices: malwareType.id_peripheral_devices
    });
    setIsEditDialogOpen(true);
  };

  // Handle update malware type
  const handleUpdate = async () => {
    if (!selectedMalwareType || !editFormData.malware_type_name?.trim()) {
      toast.error('Vui lòng nhập tên loại mã độc');
      return;
    }
    
    setIsUpdating(true);
    setErrorMessage('');
    try {
      await malwareTypesService.update(selectedMalwareType.id, editFormData);
      toast.success('Cập nhật loại mã độc thành công!');
      setIsEditDialogOpen(false);
      setSelectedMalwareType(null);
      // Refresh data after successful update
      refreshData();
    } catch (error: any) {
      const errorMsg = error?.response?.data?.message || error?.message || 'Có lỗi xảy ra khi cập nhật loại mã độc';
      setErrorMessage(errorMsg);
      toast.error(errorMsg);
      console.error('Error updating malware type:', error);
    } finally {
      setIsUpdating(false);
    }
  };

  // Handle delete malware type
  const handleDelete = async (malwareType: MalwareType) => {
    setIsDeleting(true);
    try {
      await malwareTypesService.delete(malwareType.id);
      toast.success(`Đã xóa loại mã độc "${malwareType.malware_type_name}" thành công!`);
      
      // Check if this is the last item on the current page
      // If so, go to previous page before refreshing
      if (malwareTypes.length === 1 && currentPage > 1) {
        setCurrentPage(currentPage - 1);
      }
      
      // Refresh data after successful deletion
      refreshData();
    } catch (error: any) {
      const errorMsg = error?.response?.data?.message || error?.message || 'Có lỗi xảy ra khi xóa loại mã độc';
      toast.error(errorMsg);
      console.error('Error deleting malware type:', error);
    } finally {
      setIsDeleting(false);
    }
  };

  // Handle view details
  const handleView = (malwareType: MalwareType) => {
    setSelectedMalwareType(malwareType);
    setIsViewDialogOpen(true);
  };

  // Clear error message when dialogs are closed
  const handleCloseCreateDialog = (open: boolean) => {
    setIsDialogOpen(open);
    if (!open) {
      setErrorMessage('');
    }
  };

  const handleCloseEditDialog = (open: boolean) => {
    setIsEditDialogOpen(open);
    if (!open) {
      setErrorMessage('');
    }
  };


  return (
    <div className="space-y-6 fade-in-up">
      <div className="slide-in-left">
        <h1>Quản lý loại mã độc</h1>
        <p className="text-muted-foreground">
          Quản lý và phân loại các loại mã độc trong hệ thống
        </p>
      </div>

      <Card className="card-hover">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Danh sách loại mã độc</CardTitle>
              <CardDescription>
                Tổng cộng {total} loại mã độc trong hệ thống
              </CardDescription>
            </div>
            <div className="flex space-x-2">
              <Button 
                onClick={refreshData}
                variant="outline"
                className="btn-animate scale-hover"
                disabled={paginationLoading || isRefreshing}
                title="Làm mới dữ liệu"
              >
                <RefreshCw className={`mr-2 h-4 w-4 ${(paginationLoading || isRefreshing) ? 'animate-spin' : ''}`} />
                Làm mới
              </Button>
              <Dialog open={isDialogOpen} onOpenChange={handleCloseCreateDialog}>
              <DialogTrigger asChild>
                <Button className="btn-animate scale-hover">
                  <Plus className="mr-2 h-4 w-4" />
                  Thêm loại mã độc
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Thêm loại mã độc mới</DialogTitle>
                  <DialogDescription>
                    Thêm loại mã độc mới vào hệ thống
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  {errorMessage && (
                    <div className="flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-md">
                      <XCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                      <span className="text-sm text-red-700">{errorMessage}</span>
                    </div>
                  )}
                  <div className="space-y-2">
                    <Label htmlFor="malware-name">Tên loại mã độc *</Label>
                    <Input 
                      id="malware-name" 
                      placeholder="Nhập tên loại mã độc"
                      value={formData.malware_type_name}
                      onChange={(e) => setFormData(prev => ({ ...prev, malware_type_name: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="peripheral-device">Thiết bị ngoại vi</Label>
                    <Input 
                      id="peripheral-device" 
                      placeholder="Nhập ID thiết bị ngoại vi (tùy chọn)"
                      value={formData.id_peripheral_devices || ''}
                      onChange={(e) => setFormData(prev => ({ ...prev, id_peripheral_devices: e.target.value || null }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="malware-description">Mô tả</Label>
                    <Textarea 
                      id="malware-description" 
                      rows={3} 
                      placeholder="Nhập mô tả chi tiết"
                      value={formData.description || ''}
                      onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button 
                    type="submit" 
                    className="w-full" 
                    onClick={handleCreate}
                    disabled={isCreating || !formData.malware_type_name.trim()}
                  >
                    {isCreating ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Đang tạo...
                      </>
                    ) : (
                      'Thêm loại mã độc'
                    )}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
            </div>

            {/* Edit Dialog */}
            <Dialog open={isEditDialogOpen} onOpenChange={handleCloseEditDialog}>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Chỉnh sửa loại mã độc</DialogTitle>
                  <DialogDescription>
                    Cập nhật thông tin loại mã độc
                  </DialogDescription>
                </DialogHeader>
                <div className="space-y-4 py-4">
                  {errorMessage && (
                    <div className="flex items-center space-x-2 p-3 bg-red-50 border border-red-200 rounded-md">
                      <XCircle className="h-4 w-4 text-red-500 flex-shrink-0" />
                      <span className="text-sm text-red-700">{errorMessage}</span>
                    </div>
                  )}
                  <div className="space-y-2">
                    <Label htmlFor="edit-malware-name">Tên loại mã độc *</Label>
                    <Input 
                      id="edit-malware-name" 
                      placeholder="Nhập tên loại mã độc"
                      value={editFormData.malware_type_name}
                      onChange={(e) => setEditFormData(prev => ({ ...prev, malware_type_name: e.target.value }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-peripheral-device">Thiết bị ngoại vi</Label>
                    <Input 
                      id="edit-peripheral-device" 
                      placeholder="Nhập ID thiết bị ngoại vi (tùy chọn)"
                      value={editFormData.id_peripheral_devices || ''}
                      onChange={(e) => setEditFormData(prev => ({ ...prev, id_peripheral_devices: e.target.value || null }))}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="edit-malware-description">Mô tả</Label>
                    <Textarea 
                      id="edit-malware-description" 
                      rows={3} 
                      placeholder="Nhập mô tả chi tiết"
                      value={editFormData.description || ''}
                      onChange={(e) => setEditFormData(prev => ({ ...prev, description: e.target.value }))}
                    />
                  </div>
                </div>
                <DialogFooter>
                  <Button 
                    variant="outline" 
                    onClick={() => setIsEditDialogOpen(false)}
                    disabled={isUpdating}
                  >
                    Hủy
                  </Button>
                  <Button 
                    onClick={handleUpdate}
                    disabled={isUpdating || !editFormData.malware_type_name?.trim()}
                  >
                    {isUpdating ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        Đang cập nhật...
                      </>
                    ) : (
                      'Cập nhật'
                    )}
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>

            {/* View Details Dialog */}
            <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
              <DialogContent className="sm:max-w-lg">
                <DialogHeader>
                  <DialogTitle>Chi tiết loại mã độc</DialogTitle>
                  <DialogDescription>
                    Thông tin chi tiết về loại mã độc
                  </DialogDescription>
                </DialogHeader>
                {selectedMalwareType && (
                  <div className="space-y-4 py-4">
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">ID</Label>
                        <p className="text-sm">{selectedMalwareType.id}</p>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Trạng thái</Label>
                        <div className="mt-1">
                          <Badge variant="outline" className={getStatusColor(selectedMalwareType.created_at)}>
                            {getStatusText(selectedMalwareType.created_at)}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Tên loại mã độc</Label>
                      <p className="text-sm mt-1">{selectedMalwareType.malware_type_name}</p>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Thiết bị ngoại vi</Label>
                      <p className="text-sm mt-1">{selectedMalwareType.peripheral_device_name || 'Không có'}</p>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Mô tả</Label>
                      <p className="text-sm mt-1">{selectedMalwareType.description || 'Không có mô tả'}</p>
                    </div>
                    
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Người tạo</Label>
                        <p className="text-sm mt-1">{selectedMalwareType.created_by_name || 'N/A'}</p>
                      </div>
                      <div>
                        <Label className="text-sm font-medium text-muted-foreground">Người cập nhật</Label>
                        <p className="text-sm mt-1">{selectedMalwareType.updated_by_name || 'N/A'}</p>
                      </div>
                    </div>
                    
                    <div>
                      <Label className="text-sm font-medium text-muted-foreground">Ngày tạo</Label>
                      <p className="text-sm mt-1">
                        {selectedMalwareType.created_at 
                          ? new Date(selectedMalwareType.created_at).toLocaleString('vi-VN')
                          : 'N/A'
                        }
                      </p>
                    </div>
                  </div>
                )}
                <DialogFooter>
                  <Button 
                    variant="outline" 
                    onClick={() => setIsViewDialogOpen(false)}
                  >
                    Đóng
                  </Button>
                  <Button 
                    onClick={() => {
                      setIsViewDialogOpen(false);
                      if (selectedMalwareType) {
                        handleEdit(selectedMalwareType);
                      }
                    }}
                  >
                    Chỉnh sửa
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="mb-6">
            <AdvancedFilter
              searchPlaceholder="Tìm kiếm loại mã độc..."
              searchValue={searchTerm}
              onSearchChange={setSearchTerm}
              filterOptions={filterOptions}
              filters={filters}
              onFiltersChange={setFilters}
              onReset={() => setSearchTerm('')}
            />
          </div>

          {paginationLoading ? (
            <div className="flex items-center justify-center py-8">
              <Loader2 className="h-8 w-8 animate-spin" />
              <span className="ml-2">Đang tải dữ liệu...</span>
            </div>
          ) : paginationError ? (
            <div className="flex flex-col items-center justify-center py-8 space-y-4">
              <div className="flex items-center space-x-2 text-red-600">
                <XCircle className="h-8 w-8" />
                <span className="text-lg font-medium">Không thể tải dữ liệu</span>
              </div>
              <p className="text-sm text-muted-foreground text-center">
                {paginationError?.message || 'Có lỗi xảy ra khi tải danh sách loại mã độc'}
              </p>
              <Button 
                onClick={refreshData}
                variant="outline"
                className="mt-2"
              >
                Thử lại
              </Button>
            </div>
          ) : (
            <>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Tên loại mã độc</TableHead>
                    <TableHead>Thiết bị ngoại vi</TableHead>
                    <TableHead>Trạng thái</TableHead>
                    <TableHead>Người tạo</TableHead>
                <TableHead>Mô tả</TableHead>
                <TableHead className="text-right">Thao tác</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
                  {malwareTypes.map((malware, index) => (
                <TableRow key={malware.id} className="stagger-item" style={{animationDelay: `${index * 0.05}s`}}>
                      <TableCell className="font-medium">{malware.malware_type_name}</TableCell>
                      <TableCell>{malware.peripheral_device_name || 'N/A'}</TableCell>
                  <TableCell>
                        <Badge variant="outline" className={getStatusColor(malware.created_at)}>
                          {getStatusText(malware.created_at)}
                    </Badge>
                  </TableCell>
                      <TableCell>{malware.created_by_name || 'N/A'}</TableCell>
                      <TableCell className="max-w-xs truncate">{malware.description || 'N/A'}</TableCell>
                  <TableCell className="text-right">
                    <div className="flex justify-end space-x-2">
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="scale-hover"
                            onClick={() => handleView(malware)}
                            title="Xem chi tiết"
                          >
                        <Eye className="h-4 w-4" />
                      </Button>
                          <Button 
                            variant="ghost" 
                            size="sm" 
                            className="scale-hover"
                            onClick={() => handleEdit(malware)}
                            title="Chỉnh sửa"
                          >
                        <Edit className="h-4 w-4" />
                      </Button>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button 
                                variant="ghost" 
                                size="sm" 
                                className="scale-hover text-red-600 hover:text-red-700 hover:bg-red-50"
                                disabled={isDeleting}
                                title="Xóa"
                              >
                                {isDeleting ? (
                                  <Loader2 className="h-4 w-4 animate-spin" />
                                ) : (
                        <Trash2 className="h-4 w-4" />
                                )}
                      </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>Xác nhận xóa</AlertDialogTitle>
                                <AlertDialogDescription>
                                  Bạn có chắc chắn muốn xóa loại mã độc "{malware.malware_type_name}"? 
                                  Hành động này không thể hoàn tác.
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Hủy</AlertDialogCancel>
                                <AlertDialogAction 
                                  onClick={() => handleDelete(malware)}
                                  className="bg-red-600 hover:bg-red-700"
                                >
                                  Xóa
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                    </div>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
              
              <div className="mt-4">
                <TablePagination
                  currentPage={currentPage}
                  totalPages={totalPages}
                  startIndex={startIndex}
                  endIndex={endIndex}
                  totalItems={total}
                  onPageChange={setCurrentPage}
                />
              </div>
            </>
          )}
        </CardContent>
      </Card>
    </div>
  );
}