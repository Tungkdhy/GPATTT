import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';
import { Button } from '../ui/button';
import { Input } from '../ui/input';
import { Badge } from '../ui/badge';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from '../ui/alert-dialog';
import { Label } from '../ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';
import { Plus, Edit, Trash2, Search, Filter, X, ChevronDown } from 'lucide-react';
import { toast } from 'sonner';
import malwareHashesService, { MalwareHashWithType, CreateMalwareHashDto } from '../../services/api/malwareHashes.service';
import malwareTypesService, { MalwareType } from '../../services/api/malwareTypes.service';
import { useServerPagination } from '@/hooks/useServerPagination';
import { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';
import { Separator } from '../ui/separator';

export function MalwareHashes() {
  const [reload, setReload] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [filters, setFilters] = useState<Record<string, any>>({});
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [selectedHash, setSelectedHash] = useState<MalwareHashWithType | null>(null);
  const [formData, setFormData] = useState<CreateMalwareHashDto>({
    hash_value: '',
    malware_type_id: ''
  });
  const [showAdvancedFilter, setShowAdvancedFilter] = useState(false);
  const [malwareTypes, setMalwareTypes] = useState<MalwareType[]>([]);
  const [loadingTypes, setLoadingTypes] = useState(false);

  // Load malware types from API
  useEffect(() => {
    const loadMalwareTypes = async () => {
      try {
        setLoadingTypes(true);
        const types = await malwareTypesService.getAllSimple();
        setMalwareTypes(types);
        console.log(types);
        
      } catch (error) {
        console.error('Error loading malware types:', error);
        toast.error('Lỗi khi tải danh sách loại malware');
      } finally {
        setLoadingTypes(false);
      }
    };

    loadMalwareTypes();
  }, []);

  // Use server pagination hook
  const {
    data: malwareHashes,
    currentPage,
    totalPages,
    total,
    loading,
    setCurrentPage,
  } = useServerPagination(
    (page, limit) => malwareHashesService.getAll(page, limit),
    [searchTerm, filters, reload],
    { pageSize: 10, initialPage: 1 }
  );

  console.log(malwareHashes);
  
  const getMalwareTypeColor = (type: string | null | undefined) => {
    if (!type) return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
    
    switch (type.toLowerCase()) {
      case 'ransomware': return 'bg-red-500/10 text-red-500 border-red-500/20';
      case 'keylogger': return 'bg-orange-500/10 text-orange-500 border-orange-500/20';
      case 'trojan': return 'bg-purple-500/10 text-purple-500 border-purple-500/20';
      case 'spyware': return 'bg-blue-500/10 text-blue-500 border-blue-500/20';
      case 'adware': return 'bg-yellow-500/10 text-yellow-500 border-yellow-500/20';
      case 'worm': return 'bg-green-500/10 text-green-500 border-green-500/20';
      case 'rootkit': return 'bg-indigo-500/10 text-indigo-500 border-indigo-500/20';
      case 'backdoor': return 'bg-pink-500/10 text-pink-500 border-pink-500/20';
    default: return 'bg-gray-500/10 text-gray-500 border-gray-500/20';
  }
};

  const handleAdd = async () => {
    try {
      if (!formData.hash_value.trim()) {
        toast.error('Vui lòng nhập hash value');
        return;
      }

      const newHash = await malwareHashesService.create(formData);
      console.log(newHash);

      setIsDialogOpen(false);
      setFormData({ hash_value: '', malware_type_id: '' });
      toast.success('Thêm malware hash thành công!');
      setReload(!reload);
    } catch (error) {
      console.error('Error creating malware hash:', error);
      toast.error('Lỗi khi thêm malware hash');
    }
  };

  const handleEdit = (hash: MalwareHashWithType) => {
    setSelectedHash(hash);
    setFormData({
      hash_value: hash.hash_value,
      malware_type_id: hash.malware_type_id || ''
    });
    setIsEditDialogOpen(true);
  };

  const handleUpdate = async () => {
    try {
      if (!formData.hash_value.trim()) {
        toast.error('Vui lòng nhập hash value');
        return;
      }

      if (!selectedHash) return;

      if (!selectedHash.id) {
        toast.error('Không tìm thấy ID của bản ghi để cập nhật');
        return;
      }
      await malwareHashesService.update(selectedHash.id, {
        hash_value: formData.hash_value,
        malware_type_id: formData.malware_type_id || null
      });
      
      setIsEditDialogOpen(false);
      setSelectedHash(null);
      setFormData({ hash_value: '', malware_type_id: '' });
      setReload(!reload);
      toast.success('Cập nhật malware hash thành công!');
    } catch (error) {
      console.error('Error updating malware hash:', error);
      toast.error('Lỗi khi cập nhật malware hash');
    }
  };

  const handleDeleteClick = (hash: MalwareHashWithType) => {
    setSelectedHash(hash);
    setIsDeleteDialogOpen(true);
  };

  const handleDelete = async () => {
    try {
      if (!selectedHash) return;

      if (!selectedHash.id) {
        toast.error('Không tìm thấy ID của bản ghi để xóa');
        return;
      }
      await malwareHashesService.delete(selectedHash.id);
      setIsDeleteDialogOpen(false);
      setSelectedHash(null);
      toast.success('Xóa malware hash thành công!');
      setReload(!reload);
    } catch (error) {
      console.error('Error deleting malware hash:', error);
      toast.error('Lỗi khi xóa malware hash');
    }
  };

  const clearFilters = () => {
    setFilters({});
    setSearchTerm('');
  };

  const activeFiltersCount = Object.values(filters).filter(value => value && value !== 'all')?.length;

  return (
    <div className="space-y-6 fade-in-up">
      <div className="slide-in-left">
        <h1>Quản lý Malware Hashes</h1>
        <p className="text-muted-foreground">
          Quản lý danh sách hash malware và phân loại theo loại malware
        </p>
      </div>

      <Card className="card-hover">
        <CardHeader>
          <div className="flex items-center justify-between">
            <div>
              <CardTitle>Danh sách Malware Hashes</CardTitle>
              <CardDescription>
                Tổng cộng {total} malware hashes trong hệ thống
              </CardDescription>
            </div>
            <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
              <DialogTrigger asChild>
                <Button className="btn-animate scale-hover">
                  <Plus className="mr-2 h-4 w-4" />
                  Thêm Malware Hash
                </Button>
              </DialogTrigger>
              <DialogContent className="sm:max-w-md">
                <DialogHeader>
                  <DialogTitle>Thêm Malware Hash mới</DialogTitle>
                  <DialogDescription>
                    Thêm hash malware mới vào hệ thống
                  </DialogDescription>
                </DialogHeader>
  <div className="space-y-4 py-4">
    <div className="space-y-2">
                    <Label htmlFor="hash_value">
                      Hash Value <span className="text-red-500">*</span>
      </Label>
                    <Input
                      id="hash_value"
                      placeholder="Nhập hash value (MD5, SHA1, SHA256...)"
                      value={formData.hash_value}
                      onChange={(e) => setFormData({ ...formData, hash_value: e.target.value })}
                    />
    </div>
    <div className="space-y-2">
                    <Label htmlFor="malware_type_id">
                      Loại Malware
      </Label>
                    <Select 
                      value={formData.malware_type_id || "none"} 
                      onValueChange={(value: string) => setFormData({ ...formData, malware_type_id: value === "none" ? "" : value })}
                      disabled={loadingTypes}
                    >
                      <SelectTrigger>
                        <SelectValue placeholder={loadingTypes ? "Đang tải..." : "Chọn loại malware"} />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="none">Không xác định</SelectItem>
                        {malwareTypes.map((type) => (
                          <SelectItem key={type.id} value={type.id}>
                            {type.malware_type_name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
    </div>
                </div>
                <DialogFooter>
                  <Button type="submit" className="w-full" onClick={handleAdd}>
                    Thêm Malware Hash
                  </Button>
                </DialogFooter>
              </DialogContent>
            </Dialog>
          </div>
        </CardHeader>
        <CardContent>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center space-x-2">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input
                placeholder="Tìm kiếm theo hash value..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="max-w-sm input-focus"
              />
            </div>
            
            <div className="flex items-center space-x-2">
              <Popover open={showAdvancedFilter} onOpenChange={setShowAdvancedFilter}>
                <PopoverTrigger asChild>
                  <Button variant="outline" size="sm" className="relative btn-animate scale-hover">
                    <Filter className="h-4 w-4 mr-2" />
                    Bộ lọc
                    {activeFiltersCount > 0 && (
                      <Badge variant="secondary" className="ml-2 h-5 w-5 rounded-full p-0 text-xs badge-bounce">
                        {activeFiltersCount}
                      </Badge>
                    )}
                    <ChevronDown className="h-4 w-4 ml-2" />
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-80" align="end">
                  <div className="space-y-4">
                    <div className="flex items-center justify-between">
                      <h4 className="font-medium">Bộ lọc nâng cao</h4>
                      {activeFiltersCount > 0 && (
                        <Button
                          variant="ghost"
                          size="sm"
                          onClick={clearFilters}
                          className="h-8 px-2"
                        >
                          <X className="h-4 w-4 mr-1" />
                          Xóa tất cả
                        </Button>
                      )}
                    </div>
                    <Separator />
                    
    <div className="space-y-2">
                      <Label className="text-sm font-medium">Loại Malware</Label>
                      <Select
                        value={filters.malware_type_id === null ? 'none' : filters.malware_type_id || 'all'}
                        onValueChange={(value: string) => 
                          setFilters(prev => ({ 
                            ...prev, 
                            malware_type_id: value === 'all' ? undefined : value === 'none' ? null : value 
                          }))
                        }
                        disabled={loadingTypes}
                      >
                        <SelectTrigger className="h-8">
                          <SelectValue placeholder={loadingTypes ? "Đang tải..." : "Tất cả"} />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="all">Tất cả</SelectItem>
                          <SelectItem value="none">Không xác định</SelectItem>
                          {malwareTypes.map((type) => (
                            <SelectItem key={type.id} value={type.id}>
                              {type.malware_type_name}
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>
                  </div>
                </PopoverContent>
              </Popover>
            </div>
          </div>

          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Hash Value</TableHead>
                <TableHead>Loại Malware</TableHead>
                <TableHead className="text-right">Thao tác</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {loading ? (
                <TableRow>
                  <TableCell colSpan={3} className="text-center py-8">
                    <div className="flex items-center justify-center">
                      <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-primary"></div>
                      <span className="ml-2">Đang tải...</span>
                    </div>
                  </TableCell>
                </TableRow>
              ) : malwareHashes?.length === 0 ? (
                <TableRow>
                  <TableCell colSpan={3} className="text-center py-8 text-muted-foreground">
                    Không có dữ liệu
                  </TableCell>
                </TableRow>
              ) : (
                (malwareHashes as MalwareHashWithType[]).map((hash: MalwareHashWithType, index: number) => (
                  <TableRow key={hash.id || hash.hash_value} className="stagger-item" style={{ animationDelay: `${index * 0.05}s` }}>
                    <TableCell className="font-mono text-sm">
                      <div className="max-w-xs truncate" title={hash.hash_value}>
                        {hash.hash_value}
                      </div>
                    </TableCell>
                    <TableCell>
                      <Badge variant="outline" className={getMalwareTypeColor(hash.malware_type_name)}>
                        {hash.malware_type_name || 'Không xác định'}
                      </Badge>
                    </TableCell>
                    <TableCell className="text-right">
                      <div className="flex items-center justify-end space-x-2">
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="scale-hover" 
                          onClick={() => handleEdit(hash)}
                        >
                          <Edit className="h-4 w-4" />
                        </Button>
                        <Button 
                          variant="ghost" 
                          size="sm" 
                          className="scale-hover" 
                          onClick={() => handleDeleteClick(hash)}
                        >
                          <Trash2 className="h-4 w-4 text-destructive" />
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))
              )}
            </TableBody>
          </Table>

          {/* Pagination */}
          {totalPages > 1 && (
            <div className="flex items-center justify-between mt-4">
              <div className="text-sm text-muted-foreground">
                Hiển thị {((currentPage - 1) * 10) + 1} - {Math.min(currentPage * 10, total)} trong tổng số {total} bản ghi
              </div>
              <div className="flex items-center space-x-2">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage - 1)}
                  disabled={currentPage === 1}
                >
                  Trước
                </Button>
                <span className="text-sm">
                  Trang {currentPage} / {totalPages}
                </span>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => setCurrentPage(currentPage + 1)}
                  disabled={currentPage === totalPages}
                >
                  Sau
                </Button>
              </div>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Chỉnh sửa Malware Hash</DialogTitle>
            <DialogDescription>
              Cập nhật thông tin malware hash
            </DialogDescription>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="edit-hash_value">
                Hash Value <span className="text-red-500">*</span>
              </Label>
              <Input
                id="edit-hash_value"
                placeholder="Nhập hash value"
                value={formData.hash_value}
                onChange={(e) => setFormData({ ...formData, hash_value: e.target.value })}
              />
    </div>
    <div className="space-y-2">
              <Label htmlFor="edit-malware_type_id">
                Loại Malware
      </Label>
              <Select 
                value={formData.malware_type_id || "none"} 
                onValueChange={(value: string) => setFormData({ ...formData, malware_type_id: value === "none" ? "" : value })}
                disabled={loadingTypes}
              >
                <SelectTrigger>
                  <SelectValue placeholder={loadingTypes ? "Đang tải..." : "Chọn loại malware"} />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="none">Không xác định</SelectItem>
                  {malwareTypes.map((type) => (
                    <SelectItem key={type.id} value={type.id}>
                      {type.malware_type_name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
    </div>
    </div>
          <DialogFooter>
            <Button type="submit" className="w-full" onClick={handleUpdate}>
              Cập nhật
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* Delete Confirmation Dialog */}
      <AlertDialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Xác nhận xóa</AlertDialogTitle>
            <AlertDialogDescription>
              Bạn có chắc chắn muốn xóa malware hash này?
              <br />
              <strong className="font-mono text-sm">{selectedHash?.hash_value}</strong>
              <br />
              Hành động này không thể hoàn tác.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogCancel>Hủy</AlertDialogCancel>
            <AlertDialogAction 
              onClick={handleDelete} 
              className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
            >
              Xóa
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
}